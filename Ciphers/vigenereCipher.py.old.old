'''
implements vigenere cipher
Author: James Lyons 
Created: 2012-04-28
https://github.com/jameslyons/pycipher/blob/master/pycipher/vigenere.py
'''
from base import *

####################################################################################

"""The Vigenere Cipher has a key consisting of a word e.g. 'FORTIFICATION'.
This cipher encrypts a letter according to the Vigenere tableau, the algorithm can be 
seen e.g. http://practicalcryptography.com/ciphers/vigenere-gronsfeld-and-autokey-cipher/

:param key: The keyword, any word or phrase will do. Must consist of alphabetical characters only, no punctuation of numbers.        
"""
def vigenereCipher(msg, key, mode):
    key = [k.upper() for k in key]

    if mode == 'encrypt':
        encipher(msg, key)
    elif mode == 'decrypt':
        decipher(msg, key)
    
def encipher(string, key):
    """Encipher string using Vigenere cipher according to initialised key. Punctuation and whitespace
    are removed from the input.       

    Example::

        ciphertext = Vigenere('HELLO').encipher(plaintext)     

    :param string: The string to encipher.
    :returns: The enciphered string.
    """           
    string = remove_punctuation(string)
    print('string is: %s' % string)
    ret = ''
    for (i,c) in enumerate(string):
        i = i%len(key)
        ret += i2a(a2i(c) + a2i(key[i]))
    return ret    

def decipher(string, key):
    """Decipher string using Vigenere cipher according to initialised key. Punctuation and whitespace
    are removed from the input.       

    Example::

        plaintext = Vigenere('HELLO').decipher(ciphertext)     

    :param string: The string to decipher.
    :returns: The enciphered string.
    """               
    string = remove_punctuation(string)
    ret = ''
    for (i,c) in enumerate(string):
        i = i%len(key)
        ret += i2a(a2i(c) - a2i(key[i]))
    return ret